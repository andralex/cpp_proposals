#!/usr/bin/env python3
import glob
import os
import re
import collections
import sys
import frontmatter
from bs4 import BeautifulSoup
import jinja2

def get_title(filename):
    with open(filename) as f:
        html = BeautifulSoup(f.read(), 'html.parser')
        text = ' '.join(map(str,html.h1.children))
        return text.replace('<p>', '').replace('</p>','')

def get_markdown_from(path, num):
    mds = glob.glob(f"{path}/*.md")
    if len(mds) == 1:
        return mds[0]

    makefile = f'{path}/Makefile'
    if not os.path.exists(makefile):
        return None

    with open(makefile) as f:
        for line in f:
            try:
                dst, src = line.split(':')
                dst = dst.strip()
                src = src.strip()

                if dst.startswith(f'p{num}r'):
                    return f"{path}/{src}"
            except ValueError:
                pass

    return None

def get_tag_from_md(path, num):
    md = get_markdown_from(path, num)
    if md is None:
        return

    paper = frontmatter.load(open(md))
    return paper.get('tag', None)

iso = re.compile(r'([pd])(\d{4})r(\d+).html')
papers = collections.defaultdict(list)
others = []

for filename in glob.glob(f'*/*.html'):
    path, base = os.path.split(filename)
    if path in ('sd6', 'md'):
        continue

    m = iso.match(base)
    if m:
        pd, num, rev = m.groups()
        num = int(num)
        rev = int(rev)
        papers[num].append((rev, pd, get_tag_from_md(path, num), filename))
    else:
        others.append((base, filename))

titles = {847: "Deducing `this`"}

template = jinja2.Template(open("all_papers.tpl").read())
numbered_papers = []

badges = {
    "ranges": "-ranges-brightgreen",
    "constexpr": "-constexpr-blueviolet",
    "spaceship": "-%3C%3D%3E-yellow",
    "reflection": "-reflection-orange",
}

for num in sorted(papers):
    vals = sorted(papers[num])
    title = titles.get(num)
    if title is None:
        title = get_title(vals[-1][-1])

    current = {"number": f"P{num:04}", "title": title}
    current["revisions"] = [{"href": filename, "name": f"{pd}{num:04}r{rev}"} for (rev, pd, _, filename) in vals]

    tag = vals[-1][2]
    if tag is not None:
        current["badge"] = badges[tag]

    numbered_papers.append(current)

print(template.render({"numbered_papers": numbered_papers}), file=open("all_papers.html", "w"))

# out = open('all_papers.md', 'w')
# print('# Papers with Numbers', file=out)
# titles = {847: "Deducing `this`"}
# for num in sorted(papers):
#     vals = sorted(papers[num])
#     title = titles.get(num)
#     if title is None:
#         title = get_title(vals[-1][-1])
#     all_revs = ' '.join(f'[{pd}{num:04d}r{rev}]({filename})' for (rev, pd, _, filename) in vals)

#     tag = vals[-1][2]
#     if tag is None:
#         tag_str = ''
#     else:
#         tag_str = f'![][~{tag}] '
#     print(f'- {tag_str}P{num:04} {title}: {all_revs}', file=out)

# print(file=out)
# print('[~ranges]: https://img.shields.io/badge/-ranges-brightgreen', file=out)
# print('[~constexpr]: https://img.shields.io/badge/-constexpr-blueviolet', file=out)
# print('[~spaceship]: https://img.shields.io/badge/-%3C%3D%3E-yellow', file=out)
# print(file=out)
# print('# Other Papers', file=out)
# for (base, filename) in sorted(others):
#     print(f'- {get_title(filename)}: [{base}]({filename})', file=out)
